<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.oracleclub.server.dao.UserMapper">
    <resultMap id="userMap" type="User">
        <id property="id" column="id"/>
        <result property="nickname" column="nickname"/>
        <result property="name" column="name"/>
        <result property="stuNum" column="stu_num"/>
        <result property="email" column="email"/>
        <result property="password" column="password"/>
        <result property="phNum" column="ph_num"/>
        <result property="info" column="info"/>
        <result property="avatar" column="avatar"/>
        <result property="birthday" column="birthday"/>
        <result property="status" column="status"/>
        <result property="role" column="role"/>
        <result property="ipAddr" column="ip_addr"/>
        <result property="loginAt" column="login_at"/>

        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="deletedAt" column="deleted_at"/>

        <association property="department" column="id"
                     resultMap="com.oracleclub.server.dao.DepartmentMapper.departmentMap"/>
    </resultMap>

    <resultMap id="simpleUserMap" type="SimpleUserVO">
        <id property="id" column="uid"/>
        <result property="nickname" column="nickname"/>
        <result property="name" column="uname"/>
        <result property="stuNum" column="stu_num"/>
        <result property="email" column="email"/>
        <result property="info" column="info"/>
        <result property="avatar" column="avatar"/>

        <association property="department" column="id"
                     resultMap="com.oracleclub.server.dao.DepartmentMapper.departmentVOMap"/>
    </resultMap>

    <sql id="base_table">
        users u
    </sql>

    <sql id="role_join">
        LEFT JOIN user_role ur ON u.id = ur.user_id
        LEFT JOIN roles r ON ur.role_id = r.id
    </sql>

    <sql id="department_join">
        LEFT JOIN departments d ON u.dep_id = d.id
    </sql>

    <sql id="cols">
        u.id,nickname,u.name,stu_num,password,email,ph_num,info,avatar,birthday,status,ip_addr,login_at,
        u.created_at,u.updated_at,u.deleted_at,
        d.name as dep_name,d.alias_name as dep_alias_name,d.content dep_content,
        r.key as `role`
    </sql>

    <select id="findAllExistWithParams" parameterType="UserQueryParam" resultMap="userMap">
        SELECT
        <include refid="cols"/>
        FROM
        <include refid="base_table"/>
        <include refid="department_join"/>
        <include refid="role_join"/>
        WHERE
        u.deleted_at IS NULL
        <if test="u.name!=null and u.name!=''">
            AND u.name LIKE concat('%',#{u.name},'%')
        </if>
        <if test="u.depId!=null and u.depId!=''">
            AND u.dep_id = #{u.depId}
        </if>
        <if test="u.email!=null and u.email!=''">
            AND u.email LIKE concat('%',#{u.email},'%')
        </if>
        <if test="u.phNum!=null and u.phNum!=''">
            AND u.ph_num LIKE concat('%',#{u.phNum},'%')
        </if>
        <if test="u.stuNum!=null and u.stuNum!=''">
            AND u.stu_num LIKE concat('%',#{u.stuNum},'%')
        </if>
        <if test="u.status!=null">
            AND u.status = #{u.status}
        </if>
        <if test="u.loginStart!=null">
            AND u.login_at <![CDATA[ >= ]]> #{u.loginStart}
        </if>
        <if test="u.loginEnd!=null">
            AND u.login_at <![CDATA[ <= ]]> #{u.loginEnd}
        </if>

    </select>

    <select id="findUserById" resultMap="userMap" parameterType="Long">
        SELECT
        <include refid="cols"/>
        FROM
        <include refid="base_table"/>
        <include refid="department_join"/>
        <include refid="role_join"/>
        WHERE u.id = #{id}
    </select>

    <select id="findByEmail" resultMap="userMap" parameterType="String">
        SELECT
        <include refid="cols"/>
        FROM
        <include refid="base_table"/>
        <include refid="department_join"/>
        <include refid="role_join"/>
        WHERE u.email = #{email}
    </select>

    <select id="findByStuNum" resultMap="userMap" parameterType="String">
        SELECT
        <include refid="cols"/>
        FROM
        <include refid="base_table"/>
        <include refid="department_join"/>
        <include refid="role_join"/>
        WHERE u.stu_num = #{stuNum}
    </select>

    <update id="updateUserInfoBy" parameterType="User">
        UPDATE
        <include refid="base_table"/>
        SET
        u.nickname = #{u.nickname},
        u.name = #{u.name},
        u.dep_id = #{u.department.id},
        u.email = #{u.email},
        u.ph_num = #{u.phNum},
        u.stu_num = #{u.stuNum},
        u.status = #{u.status},
        u.info = #{u.info},
        u.avatar = #{u.avatar},
        u.birthday = #{u.birthday},
        u.ip_addr = #{u.ipAddr},
        u.login_at = #{u.loginAt}
        WHERE
        u.id = #{u.id}
    </update>

    <update id="updateLoginTimeBy" parameterType="User">
        UPDATE
        <include refid="base_table"/>
        SET
        u.login_at = #{u.loginAt}
        WHERE
        u.id = #{u.id}
    </update>

    <select id="getUserCount" resultType="Integer">
        SELECT count(*) FROM
        <include refid="base_table"/>
        WHERE deleted_at IS NULL
    </select>

    <insert id="insertUser" parameterType="User" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO users
        ( nickname, name, stu_num, email, password, ph_num, status, login_at )
        VALUES (#{u.nickname}, #{u.name}, #{u.stuNum}, #{u.email}, #{u.password}, #{u.phNum}, #{u.status}, #{u.loginAt})
    </insert>

    <insert id="insertUserRole" parameterType="User">
        INSERT INTO user_role
        ( user_id, role_id )
        VALUES (#{id}, #{role})
    </insert>
</mapper>
